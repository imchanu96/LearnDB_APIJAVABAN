--@필수 입력을 위한 not null제약조건

CREATE TABLE EMP01(
    EMPNO NUMBER(4),
    ENAME VARCHAR2(10),
    JOB VARCHAR2(9),
    DEPTNO NUMBER(2)
);

SELECT *
FROM EMP01;

INSERT INTO EMP01
VALUE(EMPNO, ENAME, JOB, DEPTNO)
VALUES(NULL, NULL, '개발', 30);

SELECT *
FROM EMP01;

------------------------------------

CREATE TABLE EMP02(
    EMPNO NUMBER(4) NOT NULL,
    ENAME VARCHAR2(10) NOT NULL,
    JOB VARCHAR2(9),
    DEPTNO NUMBER(2)
);

SELECT *
FROM EMP02;

DESC EMP02;

INSERT INTO EMP02
VALUE(EMPNO, ENAME, JOB, DEPTNO)
VALUES(NULL, NULL, '개발', 30);

SELECT *
FROM EMP02;

INSERT INTO EMP02
VALUE(EMPNO, ENAME, JOB, DEPTNO)
VALUES(1, '홍길동', '개발', 30);

INSERT INTO EMP02
VALUE(EMPNO, ENAME, JOB, DEPTNO)
VALUES(1, '홍길동', '개발', NULL);

--테이블명 명명규칙
--모든 글자는 대문자가 된다
--empNumber -> EMPNUMBER
--스네이크 표기법
--EMP_NUMBER

--dept테이블의 구조를 파악해서
--loc를 제외한 모든 컬럼에 not null을 적용하시오
	 
--not null적용 후
--입력문을 통해 not null 메시지가 뜨는 경우와
--입력이 잘 되는 경우 2가지를 증명하시오
	 
--제약조건을 자신이 만든 테이블에 적용되었는지 확인하시오
SELECT *
FROM DEPT;

DESC DEPT;

DROP TABLE DEPT_TEST01;

CREATE TABLE DEPT_TEST01(
    DEPTNO NUMBER(2) NOT NULL,
    DNAME VARCHAR2(14) NOT NULL,
    LOC VARCHAR(13)
);
    
INSERT INTO DEPT_TEST01
VALUE(DEPTNO, DNAME, LOC)
VALUES(NULL, NULL, '서울');

INSERT INTO DEPT_TEST01
VALUE(DEPTNO, DNAME, LOC)
VALUES(NULL, '이젠', '서울');

INSERT INTO DEPT_TEST01
VALUE(DEPTNO, DNAME, LOC)
VALUES(40, NULL, '서울');

INSERT INTO DEPT_TEST01
VALUE(DEPTNO, DNAME, LOC)
VALUES(40, '이젠', '서울');

INSERT INTO DEPT_TEST01
VALUE(DEPTNO, DNAME, LOC)
VALUES(50, '이젠', NULL);

SELECT *
FROM DEPT_TEST01;

DESC DEPT_TEST01;

SELECT *
FROM user_constraints
WHERE TABLE_NAME = 'DEPT_TEST01';

--@유일한 값만 허용하는 UNIQUE 제약 조건

CREATE TABLE EMP03(
    EMPNO NUMBER(4) UNIQUE,
    ENAME VARCHAR2(10) NOT NULL,
    JOB VARCHAR(9),
    DEPTNO NUMBER(2)
);

INSERT INTO EMP03
VALUE(EMPNO, ENAME, JOB, DEPTNO)
VALUES(10, '홍길동', '개발', 30);

INSERT INTO EMP03
VALUE(EMPNO, ENAME, JOB, DEPTNO)
VALUES(10, '이순신', '보수', 30);

SELECT *
FROM EMP03;

--부서테이블에서 LOC컬럼에만
--UNIQUE와 널 값을 허용하지 않는 제약조건을 적용하고
--수행이 되는 경우와 수행이 안 되는 경우를 작성하고
--제약조건이 적용되었는지 확인하시오

DESC DEPT;

DROP TABLE DEPT_TEST2;

CREATE TABLE DEPT_TEST2(
    DEPTNO NUMBER(2),
    DNAME VARCHAR2(14),
    LOC VARCHAR2(13) UNIQUE NOT NULL
);

INSERT INTO DEPT_TEST2
VALUE(DEPTNO, DNAME, LOC)
VALUES(90, '사람1', 'SEOUL');

INSERT INTO DEPT_TEST2
VALUE(DEPTNO, DNAME, LOC)
VALUES(88, '사람2', 'SEOUL');

INSERT INTO DEPT_TEST2
VALUE(DEPTNO, DNAME, LOC)
VALUES(90, '사람3', NULL);

SELECT *
FROM DEPT_TEST2;

SELECT *
FROM USER_CONSTRAINTS
WHERE TABLE_NAME = 'DEPT_TEST2';

--@데이터 구분을 위한 PRIMARY KEY 제약조건(기본키라고도 부른다)

--이름이 같은 사람은 존재해도 주민번호가 같은 사람은 없다.
--주민번호와 같은 유일한 정보를 만들고 싶다면
--기본키 제약조건을 사용한다.

CREATE TABLE EMP04(
    EMPNO NUMBER(4) PRIMARY KEY,
    ENAME VARCHAR2(10) NOT NULL,
    JOB VARCHAR(9) NOT NULL,
    DEPTNO NUMBER(2)
);

INSERT INTO EMP04
VALUE(EMPNO, ENAME, JOB, DEPTNO)
VALUES(10, '홍길동', '개발', 30);

--unique constraint
INSERT INTO EMP04
VALUE(EMPNO, ENAME, JOB, DEPTNO)
VALUES(10, '이순신', '개발', 30);

--cannot insert NULL into
INSERT INTO EMP04
VALUE(EMPNO, ENAME, JOB, DEPTNO)
VALUES(NULL, '임진록', '개발', 30);

INSERT INTO EMP04
VALUE(EMPNO, ENAME, JOB, DEPTNO)
VALUES(11, '임진록', '개발', 30);

SELECT *
FROM EMP04;

ROLLBACK;

--기본키를 잘 적용하시오
--DEPT테이블에서 DEPTNO컬럼에 기본키를 적용하시오
--나머지 컬럼들이 기본적으로 존재하고
--마지막에 컬럼명을 부서의 일련번호라는 컬럼을 만들고
--제약조건은 유니크 낫 널을 적용한다.

--입력이 가능한 경우와 불가능한 경우의 데이터를 입력하는데
--기본키와 유니크 낫 널의 차이를 살펴보시오

DESC DEPT;

CREATE TABLE DEPT_TEST03(
    DEPTNO NUMBER(2) PRIMARY KEY,
    DNAME VARCHAR2(14),
    LOC VARCHAR(13),
    SERIALNUMBER NUMBER UNIQUE NOT NULL
);

INSERT INTO DEPT_TEST03
VALUE(DEPTNO, DNAME, LOC, SERIALNUMBER)
VALUES (40, '개발', '서울', 9999);

SELECT *
FROM dept_test03;

INSERT INTO DEPT_TEST03
VALUE(DEPTNO, DNAME, LOC, SERIALNUMBER)
VALUES (40, '영업', '부산', 8888);

INSERT INTO DEPT_TEST03
VALUE(DEPTNO, DNAME, LOC, SERIALNUMBER)
VALUES (30, '영업', '부산', 9999);

INSERT INTO DEPT_TEST03
VALUE(DEPTNO, DNAME, LOC, SERIALNUMBER)
VALUES (50, '영업', '부산', 8888);

SELECT *
FROM dept_test03;

SELECT *
FROM USER_CONSTRAINTS
WHERE TABLE_NAME = 'DEPT_TEST03';

DROP TABLE DEPT_TEST03;


CREATE TABLE EMP05(
    EMPNO NUMBER(4) CONSTRAINT EMP05_EMPNO_PK PRIMARY KEY , 
    --EMPNO CONSTRAINT_NAME 을 EMP05_EMPNO_PK로 명명
    ENAME VARCHAR2(10) CONSTRAINT EMP05_ENAME_NN NOT NULL,
    --ENAME CONSTRAINT_NAME 을 EMP05_ENAME_NN로 명명
    JOB VARCHAR(9) CONSTRAINT EMP05_JOB_UK UNIQUE,
    --JOB CONSTRAINT_JOB 을 EMP05_JOB_UK로 명명
    DEPTNO NUMBER(2)
);

-- PK = PRIMARY KEY, NN = NOT NULL, UK = UNIQUE KEY
SELECT *
FROM EMP05;

SELECT *
FROM USER_CONSTRAINTS
WHERE CONSTRAINT_NAME LIKE 'EMP%';

--DEPT 테이블에
--DEPTNO에 기본키
--부서명에 NOT NULL제약조건명을 명시하여 적용하시오

--딕셔너리에서 확인

DESC DEPT;

CREATE TABLE DEPT_TEST04(
    DEPTNO NUMBER(2) CONSTRAINT DEPT_TEST04_DEPTNO_PK PRIMARY KEY , 
    DNAME VARCHAR2(14) CONSTRAINT DEPT_TEST04_DNAME_NN NOT NULL,
    LOC VARCHAR(13)
);

SELECT *
FROM USER_CONSTRAINTS
WHERE CONSTRAINT_NAME LIKE '%TEST04%';

CREATE TABLE EMP06(
    EMPNO NUMBER(4) CONSTRAINT EMP06_EMPNO_PK PRIMARY KEY , 
    ENAME VARCHAR2(10) CONSTRAINT EMP06_ENAME_NN NOT NULL,
    SAL NUMBER(7, 2) CONSTRAINT EMP06_SAL_CK CHECK(SAL >= 1000 AND SAL <= 4000),
    GENDER VARCHAR2(1) CONSTRAINT EMP06_GENDER_CK CHECK(GENDER IN('M', 'F', 'A'))
);

INSERT INTO EMP06
VALUE(EMPNO, ENAME, SAL, GENDER)
VALUES(1134, '행운아', 200, 'M');

INSERT INTO EMP06
VALUE(EMPNO, ENAME, SAL, GENDER)
VALUES(1134, '행운아', 1200, 'M');

INSERT INTO EMP06
VALUE(EMPNO, ENAME, SAL, GENDER)
VALUES(2345, '전학생', 3000, 'A');

SELECT *
FROM EMP06;

SELECT *
FROM USER_CONSTRAINTS
WHERE CONSTRAINT_NAME LIKE 'EMP06%';

DROP TABLE EMP06;

ROLLBACK;

CREATE TABLE EMP07(
    EMPNO NUMBER(4) CONSTRAINT EMP07_EMPNO_PK PRIMARY KEY , 
    ENAME VARCHAR2(100) DEFAULT '(본인명)' CONSTRAINT EMP07_ENAME_NN NOT NULL,
    SAL NUMBER(7, 2) DEFAULT 1000 CONSTRAINT EMP07_SAL_CK CHECK(SAL >= 1000 AND SAL <= 4000),
    GENDER VARCHAR2(1) CONSTRAINT EMP07_GENDER_CK CHECK(GENDER IN('M', 'F'))
);

INSERT INTO EMP07
VALUE(EMPNO, ENAME, SAL, GENDER)
VALUES(1134, '행운아', 1200, 'M');

INSERT INTO EMP07
VALUE(EMPNO, GENDER)
VALUES(2345, 'M');

SELECT *
FROM EMP07;

--부서 테이블에서 새로 만들어지는 부서 중 입력하지 않으면
--무조건 서울이라는 값이 입력된다.
--LOC
--부서번호는 3자리의 숫자값이 입력되지 않으면 무조건 오류가 발생한다.
--1 오류 012오류  100 성공  999 성공
DESC DEPT;

CREATE TABLE DEPT_TEST05(
    DEPTNO NUMBER(3) CONSTRAINT DEPT_TEST05_DEPTNO_CK CHECK (DEPTNO > 99 AND DEPTNO < 1000), 
    DNAME VARCHAR2(14),
    LOC VARCHAR(13) DEFAULT '서울'
);

SELECT *
FROM dept_test05;

INSERT INTO DEPT_TEST05
VALUE(DEPTNO, DNAME, LOC)
VALUES (1, '이젠', '서울');

INSERT INTO DEPT_TEST05
VALUE(DEPTNO, DNAME, LOC)
VALUES (012, '아카', '경기도');

INSERT INTO DEPT_TEST05
VALUE(DEPTNO, DNAME, LOC)
VALUES (100, '데미', '부산');

INSERT INTO DEPT_TEST05
VALUE(DEPTNO)
VALUES (999);

SELECT *
FROM dept_test05;

SELECT *
FROM USER_CONSTRAINTS
WHERE CONSTRAINT_NAME LIKE 'DEPT_TEST05%';

DROP TABLE DEPT_TEST05;

--@외래키

-- EMP08이 안되는 이유는 DEPT08이 생성되지 않아서 이다.
-- 추가적으로 DEPT08의 DEPTNO이 기본키가 아니기 때문에 안된다.
CREATE TABLE EMP08(
    EMPNO NUMBER(4) CONSTRAINT EMP08_EMPNO_PK PRIMARY KEY, 
    ENAME VARCHAR2(10) CONSTRAINT EMP08_ENAME_NN NOT NULL,
    JOB VARCHAR(9),
    DEPTNO NUMBER(2) CONSTRAINT EMP08_DEPTNO_FK REFERENCES DEPT08(DEPTNO)
);

DROP TABLE EMP09;
CREATE TABLE EMP09(
    EMPNO NUMBER(4) CONSTRAINT EMP09_EMPNO_PK PRIMARY KEY, 
    ENAME VARCHAR2(10) CONSTRAINT EMP09_ENAME_NN NOT NULL,
    JOB VARCHAR(9),
    DEPTNO NUMBER(2) CONSTRAINT EMP09_DEPT09_DEPTNO_FK REFERENCES DEPT09(DEPTNO)
);                           -- 본인테이블_부모테이블_컬럼_제약조건 타입


DESC DEPT;

DROP TABLE DEPT08;
CREATE TABLE DEPT08(
    DEPTNO    NUMBER(2),
    DNAME     VARCHAR2(14),
    LOC       VARCHAR2(13)
);

DROP TABLE DEPT09;
CREATE TABLE DEPT09(
    DEPTNO    NUMBER(2) PRIMARY KEY,
    DNAME     VARCHAR2(14),
    LOC       VARCHAR2(13)
);

INSERT INTO DEPT09
VALUE(DEPTNO, DNAME, LOC)
VALUES(10, '개발', 'SEOUL');

INSERT INTO DEPT09
VALUE(DEPTNO, DNAME, LOC)
VALUES(20, '총무', 'JINJU');

SELECT *
FROM DEPT09;

DESC EMP09;
-- 부모의 데이터가 먼저 입력되어야 자식 테이블에 데이터를 입력할수 있다.
INSERT INTO EMP09
VALUE(EMPNO, ENAME, JOB, DEPTNO)
VALUES(1, '전학생', '학생', 10);

INSERT INTO EMP09
VALUE(EMPNO, ENAME, JOB, DEPTNO)
VALUES(2, '전학생2', '학생2', 30);  --오류

INSERT INTO EMP09
VALUE(EMPNO, ENAME, JOB, DEPTNO)
VALUES(2, '전학생2', '학생2', 20);

INSERT INTO EMP09
VALUE(EMPNO, ENAME, JOB, DEPTNO)
VALUES(2, '전학생2', '학생2', 10);

SELECT *
FROM EMP09;

ROLLBACK;

--5. 사원 테이블과 부서 테이블을 활용하시오

--부서 테이블은 부모 테이블이다
--사원 테이블은 자식 테이블이다

--부서에는
--DEPTNO 기본키

--사원에는 
--EMPNO 기본키
--DEPTNO 외래키로 지정한다.

DESC DEPT;

DROP TABLE DEPT_TEST06;
CREATE TABLE DEPT_TEST06(
    DEPTNO NUMBER(2) CONSTRAINT DEPT_TEST06_DEPTNO PRIMARY KEY,
    DNAME VARCHAR2(14),
    LOC VARCHAR2(13)
);

DESC EMP;

DROP TABLE EMP_TEST06;
CREATE TABLE EMP_TEST06(
    EMPNO NUMBER(4) CONSTRAINT EMP_TEST06_EMPNO PRIMARY KEY,    
    ENAME VARCHAR2(10), 
    JOB VARCHAR2(9),  
    MGR NUMBER(4),    
    HIREDATE DATE,         
    SAL NUMBER(7,2),  
    COMM  NUMBER(7,2),  
    DEPTNO  NUMBER(2) CONSTRAINT EMP_T06_DEPT_TEST06_EMPNO_FK REFERENCES DEPT_TEST06(DEPTNO)
);

--부서정보를 3개 정도 입력한다.

INSERT INTO DEPT_TEST06
VALUE(DEPTNO, DNAME, LOC)
VALUES(10, '부서1', '지역1'); 

INSERT INTO DEPT_TEST06
VALUE(DEPTNO, DNAME, LOC)
VALUES(20, '부서2', '지역2'); 

INSERT INTO DEPT_TEST06
VALUE(DEPTNO, DNAME, LOC)
VALUES(30, '부서3', '지역3'); 

SELECT *
FROM DEPT_TEST06;

--사원에는 각 부서별로 1명씩
--존재하고
--첫번째 부서에만 2명만 존재하도록 하시오

SELECT *
FROM EMP_TEST06;

INSERT INTO EMP_TEST06
VALUE(EMPNO, ENAME, DEPTNO)
VALUES(1, '사원1', 10);

INSERT INTO EMP_TEST06
VALUE(EMPNO, ENAME, DEPTNO)
VALUES(2, '사원2', 10);

INSERT INTO EMP_TEST06
VALUE(EMPNO, ENAME, DEPTNO)
VALUES(3, '사원3', 20);

INSERT INTO EMP_TEST06
VALUE(EMPNO, ENAME, DEPTNO)
VALUES(4, '사원4', 30);

INSERT INTO EMP_TEST06
VALUE(EMPNO, ENAME, DEPTNO)
VALUES(5, '사원5', 40);

SELECT EMPNO, ENAME, DEPTNO
FROM EMP_TEST06;
--제약조건 확인
--명명규칙
--외래키 제약조건 오류 증명하시오

SELECT *
FROM USER_CONSTRAINTS
WHERE TABLE_NAME LIKE '%TEST06%';

DROP TABLE EMP_TEST06;
DROP TABLE DEPT_TEST06;